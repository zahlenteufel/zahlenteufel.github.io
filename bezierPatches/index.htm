<html><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>3D Scene</title>

<script type="text/javascript" src="js/gl-matrix.js"></script>

<script id="shader-fs" type="x-shader/x-fragment">
    #ifdef GL_ES
    	precision highp float;
    #endif
	varying vec4 vColor;

	void main() {
		gl_FragColor = vColor;
	}
</script>

<script id="shader-vs" type="x-shader/x-vertex">
	/* Rendering Flags */
	uniform int drawNormals;
	uniform float ambientShading;
	uniform float diffuseShading;
	uniform float specularShading;

	/* Environment */
	uniform vec3 lightPosition;
	uniform vec3 lightColor;
	uniform vec3 ambientLightColor;
	uniform mat4 cameraMatrix;
	uniform mat4 perspectiveMatrix;

	/* Vertex Attributes */
    attribute vec3 vertexPosition;
	attribute vec3 vertexNormal;
	attribute vec3 vertexColor;
	attribute float glossiness;
	
	varying vec4 vColor;       // to pass around the vertex color to the fragment shader
	
	vec3 transformPoint(in mat4 m, in vec3 p);
	vec3 transformVector(in mat4 m, in vec3 v);

    void main(void) {
		if (drawNormals==1) {
			vColor = vec4(1.0, 1.0, 1.0, 1.0);
		} else {
			vec3 lightDir = normalize(transformPoint(cameraMatrix, lightPosition) - transformPoint(cameraMatrix, vertexPosition));		
			vec3 viewDir = normalize(vec3(0.0, 0.0, 0.0) - transformPoint(cameraMatrix, vertexPosition));
			vec3 N = normalize(transformVector(cameraMatrix, vertexNormal));
			float diffuseIntensity = max(dot(N, lightDir), 0.0);
			float specularIntensity = 0.0;
			if (diffuseIntensity > 0.0) {
				vec3 R = normalize(2.0 * diffuseIntensity * N - lightDir);
			 	specularIntensity = pow(max(dot(R, viewDir), 0.0), glossiness);
			}

			vColor = vec4(
				ambientShading * (ambientLightColor * vertexColor) +  
				diffuseShading * (vertexColor * diffuseIntensity * lightColor) + 
				specularShading * specularIntensity * lightColor, 
				1.0);
		}
		gl_Position = perspectiveMatrix * cameraMatrix * vec4(vertexPosition, 1.0);
    }

	vec3 transformVector(in mat4 m, in vec3 v) {
		vec4 v2 = m * vec4(v, 0.0);
		return v2.xyz;
	}

	vec3 transformPoint(in mat4 m, in vec3 p) {
		vec4 p2 = m * vec4(p, 1.0);
		return p2.xyz / p2[3];
	}
</script>

<link rel="stylesheet" href="jquery/themes/base/jquery.ui.all.css">
<link rel="stylesheet" href="css/tp3.css">
<script type="text/javascript" src="jquery/jquery-1.6.2.min.js"></script>
<script type="text/javascript" src="jquery/jquery-ui-1.8.16.custom.min.js"></script>

<script type="text/javascript" src="js/gl-matrix-min.js"></script>

<script type="text/javascript" src="bezier.js"></script>
<script type="text/javascript" src="teapot.js"></script>
<script type="text/javascript" src="object3d.js"></script>
<script type="text/javascript" src="shaders.js"></script>
<script type="text/javascript" src="drawScene.js"></script>
<script type="text/javascript" src="createCameraMatrix.js"></script>
<script src="js/farbtastic.js" type="text/javascript"></script>
<link rel="stylesheet" href="css/farbtastic.css" type="text/css" />
<script type="text/javascript" src="ui.js"></script>
<script type="text/javascript">
    var gl;
    function initGL(canvas) {
        try {
            gl = canvas.getContext("experimental-webgl");
            gl.viewportWidth = canvas.width;
            gl.viewportHeight = canvas.height;
        } catch (e) {
        }
        if (!gl) {
            alert("Could not initialise WebGL, sorry :-(");
        }
    }

	function webGLStart() {
        var canvas = document.getElementById("canvas");
        initGL(canvas);
        initShaders();

        gl.clearColor(0.0, 0.0, 0.0, 1.0);
        gl.enable(gl.DEPTH_TEST);

        drawScene();
    }
    
	function gid(id) {
		return document.getElementById(id);
	}
</script>

</head>

<body onload="webGLStart();">
	<div id="container">
	<canvas id="canvas" onclick="clickHandler(event)" width="660" height="660"></canvas>
	<div id="controles">
		<div class="control">
			<div class="titulo">Camera Transformation:</div>
			<div class="grupo">
				Rotation: <br />
				<label>X:</label> <input id="RX" type="text" value="-30" /><label>&deg;</label><div id="sliderRX" class="slider"></div><br />
				<label>Y:</label> <input id="RY" type="text" value="-30" /><label>&deg;</label><div id="sliderRY" class="slider"></div><br />
				<label>Z:</label> <input id="RZ" type="text" value="0" /><label>&deg;</label><div id="sliderRZ" class="slider"></div>
			</div>
			<div class="grupo">
				Traslation: <br />
				<label>X:</label> <input id="TX" type="text" value="0" /><div id="sliderTX" class="slider"></div> <br />
				<label>Y:</label> <input id="TY" type="text" value="0" /><div id="sliderTY" class="slider"></div> <br />
				<label>Z:</label> <input id="TZ" type="text" value="-50" /><div id="sliderTZ" class="slider"></div>
			</div>
			<div class="grupo">
				Scale: <br />
				<label>X:</label> <input id="SX" type="text" value="10" />%<div id="sliderSX" class="slider"></div> <br />
				<label>Y:</label> <input id="SY" type="text" value="10" />%<div id="sliderSY" class="slider"></div> <br />
				<label>Z:</label> <input id="SZ" type="text" value="10" />%<div id="sliderSZ" class="slider"></div>
			</div>
		</div>
	
		<div class="control">
			<div class="titulo">Ilumination</div>
			<div class="grupo">
				Position: <br />
				<label>X:</label> <input id="LX" type="text" value="0" /><div id="sliderLX" class="slider"></div> <br />
				<label>Y:</label> <input id="LY" type="text" value="10" /><div id="sliderLY" class="slider"></div> <br />
				<label>Z:</label> <input id="LZ" type="text" value="0" /><div id="sliderLZ" class="slider"></div> <br />
				<input type="checkbox" id="mostrarNormales" onchange="drawScene();" checked /> Show Normals<br />
			</div>
			<div class="grupo">
				<label style="width:100px;">Ambient: </label><input id="colorAmb"  size="6" class="colorwell" value="#2b2b2b" type="text" /><br />
				<label style="width:100px;">Diffuse:   </label><input id="colorDif"  size="6" class="colorwell" value="#FFFFFF" type="text" /><br />
				<div id="colorpicker"></div>
			</div>
		</div>
		
		<div class = "control">
			<div class = "titulo">Shading</div>
			<input type="checkbox" id="ambientShadingCheckBox" onchange="drawScene();" checked /> Ambient Ilumination<br />
			<input type="checkbox" id="diffuseShadingCheckBox" onchange="drawScene();" checked /> Diffuse Ilumination<br />
			<input type="checkbox" id="specularShadingCheckBox" onchange="drawScene();" checked /> Specular Ilumination<br />
		</div>
	
	</div>
	</div>

</body></html>
